/********************************************************************
* Description:  spindlemotor.comp
*
* Author: Les Newell <les at sheetcam dot com>
* License: LGPL Version 3 or later
*
* Modified by Karl Cunningham 6-28-2011 <karlc at keckec dot com> 
*
* Copyright (c) 2011 All rights reserved.
*
********************************************************************
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 or later of the GNU General
 * Public License as published by the Free Software Foundation.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111 USA
 *
 * THE AUTHORS OF THIS LIBRARY ACCEPT ABSOLUTELY NO LIABILITY FOR
 * ANY HARM OR LOSS RESULTING FROM ITS USE.  IT IS _EXTREMELY_ UNWISE
 * TO RELY ON SOFTWARE ALONE FOR SAFETY.  Any machinery capable of
 * harming persons must have provisions for completely removing power
 * from all motors, etc, before persons enter any danger area.  All
 * machinery must be designed to comply with local and national safety
 * codes, and the authors of this software can not, and do not, take
 * any responsibility for such compliance.
 *
 * This code was written as part of the EMC HAL project.  For more
 * information, go to www.linuxcnc.org.
 *
*************************************************************************/

component spindlemotor "Control a spindle with different acceleration and deceleration";

description """This component will control a spindle motor with adjustable acceleration and deceleration.
It is designed for use with non-servo spindle drives that have separate fwd/reverse inputs, such as DC drives and inverters.
An encoder on the motor is used as feedback, and its output (position and velocity) are scaled by the ratio of
the selected gear.
""";

pin in float commanded-speed "Commanded motor speed in RPM";
pin in float actual-speed "Actual motor speed in RPM from the encoder";
pin in bit enable-in "If FALSE, the motor will be stopped";
pin in float motor-pos-in "Motor position in revolutions from encoder";
pin in float gear-ratio "Ratio of motor speed to spindle speed. If the motor turns faster than the spindle, this value should be greater than 1.0";

pin out float spindle-pos-out "Spindle position (motor-pos-in scaled by the gear ratio)";
pin out float spindle-rpm "Current spindle speed in RPM. Direction is indicated by the polarity of this pin (forward->positive, reverse->negative)";
pin out float spindle-rpm-abs "Absolute value of spindle speed in RPM. Useful for spindle speed displays";
pin out float output "Output in RPM to drive the motor (to PWM or similar)";

pin out bit at-speed "TRUE when the motor is at speed (see speed-tolerance)";
pin out bit forward "TRUE for forward rotation";
pin out bit reverse "TRUE for reverse rotation. Both forward and reverse are false when the motor is stopped.";
pin out bit brake "TRUE when the commanded speed is zero and the motor hasn't stopped";
pin out bit zero-speed "TRUE when the motor is stationary (see zero-tolerance)";

param rw float speed-tolerance """When the ratio of actual motor speed to commanded motor speed is \
within this fraction, at-speed is set to True. This should be a number greater than 1.0. For instance, a speed-tolerance of 1.10 \
will result in a +/-10% tolerance being applied to motor speed when determining at-speed""";

param rw float zero-tolerance=10 "Motor speed in RPM below which zero-speed is set TRUE";
param rw float accel "Maximum allowable acceleration in motor RPM / sec. Set to 0 to allow any acceleration. This is applied when accelerating to commanded-speed";
param rw float decel "Maximum allowable deceleration in motor RPM / sec. Set to 0 to allow any deceleration. This is applied when decelerating to a lower speed or stopping";
param rw float spindle-lpf "Smooth the spindle-rpm-abs output when at speed. 0 = disabled. Suitable values are probably between 1 and 20 depending on how unstable your motor is";

variable float prev_cmdspeed; /* Previous commanded speed, to check acceleration */

function _ fp;
license "GPL";
;;

FUNCTION(_) {
    float cmdspeed; // Commanded motor RPM 
    float curspeed; // Current spindle speed
	float motorspeed; // Current motor speed
    float diff;
    float tmp;
    bool reversing; // In the process of reversing

	/* Order of operations:
	 * 1. Convert ACTUAL_SPEED and MOTOR_POS_IN (encoder inputs from the motor) to spindle speed.
	 * 2. Test for ZERO_SPEED
	 * 3. Generate SPINDLE_RPM_ABS from current spindle speed, possibly filtered.
	 * 4. Make a copy of the COMMANDED_SPEED input.
	 * 5. If the ENABLE input is FALSE, stop spindle.
	 * 6. Determine whether we are AT_SPEED, by comparing commanded speed and the motor speed
	 * 7. Determine whether we are reversing direction, by comparing the polarity of the commanded_speed to motor speed.
	 * 8. Limit speed change rate to avoid going through zero or exceeding acceleration limitations.
	 * 9. Set FORWARD and REVERSE outputs according to direction.
	 * 10. Set OUTPUT as the absolute value of the desired output RPM.
	 * 11. Set the BRAKE if the commanded-speed is zero and the motor is turning.
	 */

	/* Scale the encoder output (motor RPM) by the gear ratio to 
	 *  convert motor speed to spindle RPM */
	spindle_pos_out = motor_pos_in / gear_ratio;
	motorspeed = actual_speed;
	curspeed = motorspeed / gear_ratio;
    spindle_rpm = curspeed;
    if (motorspeed >= 0) {
        tmp = curspeed;
		zero_speed = (motorspeed < zero_tolerance);
	} else {
        tmp = -curspeed;
		zero_speed = (motorspeed > -zero_tolerance);
    }

	/* Create a (possibly filtered) absolute value of spindle speed. This is only filtered when
	 *  AT_SPEED to improve its slew rate when accelerating or decelerating. */
	if(zero_speed)
		spindle_rpm_abs = 0;
	else {
		if (spindle_lpf > 0 && at_speed) {
			spindle_rpm_abs += (tmp - spindle_rpm_abs) * spindle_lpf * fperiod;
		} else {
			spindle_rpm_abs = tmp;
		}
	}

    if (enable_in) {
        cmdspeed = commanded_speed;
	} else {
        cmdspeed = 0;
    }

	/* Determine whether we're at-speed. speed_tolerance is a ratio to commanded speed. */
    tmp = speed_tolerance;
	if (tmp >= 1.0) { 
		if (motorspeed > 0.0) {
			if (motorspeed > cmdspeed) {
				at_speed = motorspeed <= (cmdspeed * tmp);
			} else {
				at_speed = cmdspeed <= (motorspeed * tmp);
			}
		} else if(motorspeed < 0.0) { // Going in reverse direction
			if (motorspeed < cmdspeed) {
				at_speed = (cmdspeed * tmp) <= motorspeed;
			} else {
				at_speed = (motorspeed * tmp) <= cmdspeed;
			}
		} else // Stopped
			at_speed = FALSE;
	} 

	/* Apply speed change limitations, based on the commanded speed relative to the 
	 *  last time through. */
    diff = cmdspeed - prev_cmdspeed;
	/* Limit diff so we don't go through zero speed */
    if ((prev_cmdspeed > 0 && diff < -prev_cmdspeed) || 
		(prev_cmdspeed < 0 && diff > -prev_cmdspeed))
			diff = -prev_cmdspeed;

	/* Limit motor acceleration and deceleration */
    reversing = (cmdspeed > 0 && curspeed < 0) || (cmdspeed < 0 && curspeed > 0);
    if (accel > 0 && !reversing) {
		tmp = accel * fperiod; /* in RPM per loop cycle */
        if (cmdspeed > 0 && diff > tmp)
			diff = tmp;
		else if (cmdspeed < 0 && diff < -tmp)
			diff = -tmp;
    }
    if (decel > 0) {
		tmp = decel * fperiod;
        if (reversing) {
            if (cmdspeed > 0 && diff > tmp)
				diff = tmp;
			else if (cmdspeed < 0 && diff < -tmp)
				diff = -tmp;
        } else {
            if (cmdspeed >= 0 && diff < -tmp)
				diff = -tmp;
			else if (cmdspeed <= 0 && diff > tmp)
				diff = tmp;
        }
    }
	/* Apply the possibly-limited diff */
	cmdspeed = prev_cmdspeed + diff;

	/* Set the forward or reverse outputs. */
    if (cmdspeed != 0) {
        forward = (cmdspeed > 0);
        reverse = (cmdspeed < 0);
    } else { /* don't try to move once stopped */
        forward = (motorspeed > 0) && forward;
        reverse = (motorspeed < 0) && reverse;
    }

	prev_cmdspeed = cmdspeed;
	if(cmdspeed >= 0)
		output = cmdspeed;
	else
		output = -cmdspeed;
	brake = (cmdspeed == 0.0 && !zero_speed);
}
