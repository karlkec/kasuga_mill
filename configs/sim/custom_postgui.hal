# Include your customized HAL commands here
# The commands in this file are run after the AXIS GUI (including PyVCP panel) starts

# **** Setup of pyvcp buttons and MDI commands using HAL_UI and pyvcp - START ****

net jog-x-pos  <=    pyvcp.jog-x+
net jog-x-neg  <=    pyvcp.jog-x-
net jog-y-pos  <=    pyvcp.jog-y+
net jog-y-neg  <=    pyvcp.jog-y-
net jog-z-pos  <=    pyvcp.jog-z+
net jog-z-neg  <=    pyvcp.jog-z-
net jog-speed  <=    pyvcp.jog-speed
net optional-stp-on     pyvcp.ostop-on     =>  halui.program.optional-stop.on
net optional-stp-off    pyvcp.ostop-off    =>  halui.program.optional-stop.off
net optional-stp-is-on  pyvcp.ostop-is-on  =>  halui.program.optional-stop.is-on
net program-pause       pyvcp.pause        =>  halui.program.pause
net program-resume      pyvcp.resume       =>  halui.program.resume
net program-single-step pyvcp.step         =>  halui.program.step

# This is for the spindle VFD fault signal - to light an LED
#net vfd-fault <= hm2_5i20.0.gpio.052.in => pyvcp.vfd-fault

# Reset the spindle VFD
#net reset-vfd <= pyvcp.vfd-reset => hm2_5i20.0.gpio.064.out

# **** The following mdi-comands are specified in the machine named INI file under [HALUI] heading
# **** command 00 - rapid to Z 0 ( G0 Z0 )
# **** command 01 - rapid to reference point ( G 28 )
# **** command 02 - zero X axis in G54 cordinate system
# **** command 03 - zero Y axis in G54 cordinate system
# **** command 04 - zero Z axis in G54 cordinate system

net MDI-Z-up            pyvcp.MDI-z_up          =>  halui.mdi-command-00
net MDI-reference-pos   pyvcp.MDI-reference     =>  halui.mdi-command-01
net MDI-zero_X          pyvcp.MDI-zerox         =>  halui.mdi-command-02
net MDI-zero_Y          pyvcp.MDI-zeroy         =>  halui.mdi-command-03
net MDI-zero_Z          pyvcp.MDI-zeroz         =>  halui.mdi-command-04
net MDI-clear-offset    pyvcp.MDI-clear-offset  =>  halui.mdi-command-05

############### Quickdraw Tool Changer GUI Interface ################

# Auto-Manual radio button
net sel-auto-change <= pyvcp.man-auto-sel.Auto => and2.auto.in1
net sel-man-change <= pyvcp.man-auto-sel.Manual => and2.man.in1

# Requested Tool Number
net tool-prep-number => pyvcp.req-toolno-disp

# QD Auto mode. For simulation only
net auto-mode <= pyvcp.qd-auto-mode => qdtoolchange.qd-auto

# QD Error
net qd-error <= qdtoolchange.error-flag => pyvcp.error-led

# pyvcp hardware monitoring, for debugging
net tool-change-auto => pyvcp.request-led
net tc-complete => pyvcp.complete-led
net qd-reset => pyvcp.reset-led
net auto-mode => pyvcp.auto-mode-led
net claw-open => pyvcp.claw-open-led
net tool-in-command => pyvcp.tool-in-led
net tool-out-command => pyvcp.tool-out-led
net carousel-cw-command => pyvcp.car-cw-led
net carousel-ccw-command => pyvcp.car-ccw-led
net carousel-home-command => pyvcp.car-home-led
net qd-fault => pyvcp.qd-fault-led

net qdtoolchanger-state <= qdtoolchange.current-state => pyvcp.changer-state-disp
net qdtoolchanger-cur-tool <= qdtoolchange.current-tool => pyvcp.cur-toolno-disp
net qdtoolchanger-homed <= qdtoolchange.is-homed => pyvcp.homed-led
net qdtoolchanger-ready <= qdtoolchange.ready => pyvcp.qd-ready-led

# Connect air pressure to the tool changer simulator
net air-press <= pyvcp.qd-air-pressure => qdsim.air-pressure

# Debugging the qdsim component
#net qdsim-pocket <= qdsim.cur-tool-no => pyvcp.cur-pocket-disp
#net qdsim-state <= qdsim.cur-state-out => pyvcp.qdsim-state
#net qdsim-arm-spindle <= qdsim.arm-spindle => pyvcp.arm-spindle


# Dump the setup to a file, to keep a record of what goes to what.
save all hal_config.txt

# **** Setup of pyvcp buttons and MDI commands using HAL_UI and pyvcp - END ****
